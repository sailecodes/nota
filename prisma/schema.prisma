generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  supabaseId  String       @unique
  firstName   String
  lastName    String
  teams       Team[]       @relation("TeamMembers")
  meetings    Meeting[]
  actionItems ActionItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// TODO: Delete team if sole member deletes themselves
model Team {
  id   String @id @default(uuid())
  name String

  members  User[]    @relation("TeamMembers")
  meetings Meeting[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * FIXME: Is this the right logic?
 * What happens if team gets deleted?
 * - All related meetings should be deleted...
 * What happens if user gets deleted?
 * - All related meetings should NOT be deleted...
 * FIXME: Change team to required when ready
 */
model Meeting {
  id            String        @id @default(uuid())
  title         String
  fileUrl       String
  processStatus ProcessStatus @default(TRANSCRIBING)
  result        Result?
  uploader      User          @relation(fields: [uploaderId], references: [id])
  uploaderId    String
  team          Team?         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Result {
  id      String @id @default(uuid())
  summary String

  actionItems ActionItem[]
  meeting     Meeting      @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  meetingId   String       @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActionItem {
  id        String    @id @default(uuid())
  action    String
  dueDate   DateTime?
  dueStatus DueStatus @default(NEW)

  assignee   User?   @relation(fields: [assigneeId], references: [id])
  assigneeId String?
  result     Result  @relation(fields: [resultId], references: [id], onDelete: Cascade)
  resultId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProcessStatus {
  TRANSCRIBING
  SUMMARIZING
  COMPLETED
  FAILED
}

enum DueStatus {
  NEW
  UPCOMING
  DUE_SOON
  COMPLETED
  OVERDUE
  NO_DUE_DATE
}
